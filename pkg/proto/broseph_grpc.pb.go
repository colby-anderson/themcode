//
//  Brown University, CS1951L, Summer 2021
//  Designed by: John Roy

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: broseph.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BrunoCoin_Version_FullMethodName       = "/BrunoCoin/Version"
	BrunoCoin_SendAddresses_FullMethodName = "/BrunoCoin/SendAddresses"
	BrunoCoin_GetAddresses_FullMethodName  = "/BrunoCoin/GetAddresses"
	BrunoCoin_Register_FullMethodName      = "/BrunoCoin/Register"
	BrunoCoin_AddMember_FullMethodName     = "/BrunoCoin/AddMember"
	BrunoCoin_KickMember_FullMethodName    = "/BrunoCoin/KickMember"
	BrunoCoin_GroupMessage_FullMethodName  = "/BrunoCoin/GroupMessage"
)

// BrunoCoinClient is the client API for BrunoCoin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrunoCoinClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*Empty, error)
	// Sends know addresses to neighbors, forwarded from node to node
	SendAddresses(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*Empty, error)
	// Gets neighbor addresses from node (can be multicast with static addr_me)
	GetAddresses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Addresses, error)
	Register(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Certificate, error)
	AddMember(ctx context.Context, in *EncKeysMem, opts ...grpc.CallOption) (*Empty, error)
	KickMember(ctx context.Context, in *EncKeysMem, opts ...grpc.CallOption) (*Empty, error)
	GroupMessage(ctx context.Context, in *GroupIM, opts ...grpc.CallOption) (*Empty, error)
}

type brunoCoinClient struct {
	cc grpc.ClientConnInterface
}

func NewBrunoCoinClient(cc grpc.ClientConnInterface) BrunoCoinClient {
	return &brunoCoinClient{cc}
}

func (c *brunoCoinClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, BrunoCoin_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brunoCoinClient) SendAddresses(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, BrunoCoin_SendAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brunoCoinClient) GetAddresses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, BrunoCoin_GetAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brunoCoinClient) Register(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, BrunoCoin_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brunoCoinClient) AddMember(ctx context.Context, in *EncKeysMem, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, BrunoCoin_AddMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brunoCoinClient) KickMember(ctx context.Context, in *EncKeysMem, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, BrunoCoin_KickMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brunoCoinClient) GroupMessage(ctx context.Context, in *GroupIM, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, BrunoCoin_GroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrunoCoinServer is the server API for BrunoCoin service.
// All implementations must embed UnimplementedBrunoCoinServer
// for forward compatibility
type BrunoCoinServer interface {
	Version(context.Context, *VersionRequest) (*Empty, error)
	// Sends know addresses to neighbors, forwarded from node to node
	SendAddresses(context.Context, *Addresses) (*Empty, error)
	// Gets neighbor addresses from node (can be multicast with static addr_me)
	GetAddresses(context.Context, *Empty) (*Addresses, error)
	Register(context.Context, *Registration) (*Certificate, error)
	AddMember(context.Context, *EncKeysMem) (*Empty, error)
	KickMember(context.Context, *EncKeysMem) (*Empty, error)
	GroupMessage(context.Context, *GroupIM) (*Empty, error)
	mustEmbedUnimplementedBrunoCoinServer()
}

// UnimplementedBrunoCoinServer must be embedded to have forward compatible implementations.
type UnimplementedBrunoCoinServer struct {
}

func (UnimplementedBrunoCoinServer) Version(context.Context, *VersionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedBrunoCoinServer) SendAddresses(context.Context, *Addresses) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAddresses not implemented")
}
func (UnimplementedBrunoCoinServer) GetAddresses(context.Context, *Empty) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddresses not implemented")
}
func (UnimplementedBrunoCoinServer) Register(context.Context, *Registration) (*Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedBrunoCoinServer) AddMember(context.Context, *EncKeysMem) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedBrunoCoinServer) KickMember(context.Context, *EncKeysMem) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickMember not implemented")
}
func (UnimplementedBrunoCoinServer) GroupMessage(context.Context, *GroupIM) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMessage not implemented")
}
func (UnimplementedBrunoCoinServer) mustEmbedUnimplementedBrunoCoinServer() {}

// UnsafeBrunoCoinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrunoCoinServer will
// result in compilation errors.
type UnsafeBrunoCoinServer interface {
	mustEmbedUnimplementedBrunoCoinServer()
}

func RegisterBrunoCoinServer(s grpc.ServiceRegistrar, srv BrunoCoinServer) {
	s.RegisterService(&BrunoCoin_ServiceDesc, srv)
}

func _BrunoCoin_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrunoCoinServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrunoCoin_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrunoCoinServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrunoCoin_SendAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Addresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrunoCoinServer).SendAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrunoCoin_SendAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrunoCoinServer).SendAddresses(ctx, req.(*Addresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrunoCoin_GetAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrunoCoinServer).GetAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrunoCoin_GetAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrunoCoinServer).GetAddresses(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrunoCoin_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrunoCoinServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrunoCoin_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrunoCoinServer).Register(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrunoCoin_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncKeysMem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrunoCoinServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrunoCoin_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrunoCoinServer).AddMember(ctx, req.(*EncKeysMem))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrunoCoin_KickMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncKeysMem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrunoCoinServer).KickMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrunoCoin_KickMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrunoCoinServer).KickMember(ctx, req.(*EncKeysMem))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrunoCoin_GroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupIM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrunoCoinServer).GroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrunoCoin_GroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrunoCoinServer).GroupMessage(ctx, req.(*GroupIM))
	}
	return interceptor(ctx, in, info, handler)
}

// BrunoCoin_ServiceDesc is the grpc.ServiceDesc for BrunoCoin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrunoCoin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BrunoCoin",
	HandlerType: (*BrunoCoinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _BrunoCoin_Version_Handler,
		},
		{
			MethodName: "SendAddresses",
			Handler:    _BrunoCoin_SendAddresses_Handler,
		},
		{
			MethodName: "GetAddresses",
			Handler:    _BrunoCoin_GetAddresses_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _BrunoCoin_Register_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _BrunoCoin_AddMember_Handler,
		},
		{
			MethodName: "KickMember",
			Handler:    _BrunoCoin_KickMember_Handler,
		},
		{
			MethodName: "GroupMessage",
			Handler:    _BrunoCoin_GroupMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broseph.proto",
}
